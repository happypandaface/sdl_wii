k, so you have to remember the extention (JPG, PNG, whatever) and you use bin2hex (a perl script) and then you make all that junk an "unsigned char" and also get the int and put it in a header file. Put that in include/images/ then make a type for it in res_loader.h and increment the NUM_IMAGES (or else the array is too small) Now put an include in res_loader.cpp (ex: #include "images/giblet.h") and Surf loader in the load function (this is where you use the extention you remembered from the beginning. I usually put the extention in the .h file. There's examples in the load function for how to make it all work. You only have to load an image once and you can cut it apart into multiple sections with "ResImage" There's a bunch of ResImages at the bottom of the load function. You have to also remember how big your image is, basically you have to hold onto the original image (.jpg .png .bmp file). Now every image needs an animation before you can use it, so head on over to animation_holder.h and gloss that up.

Animations:
Now this parts simple, just add the type to the top of animation_holder.h AND INCREMENT THE NUMBER OF ANIMATIONS and then in the load function of the respective .cpp file, make an animation for it, putting the new img type in the addFrame function and using the correct anim type (ex: get_arr_pos(ANIM_GIBLET1)). It it's a static image, just do one "addFrame", but it can have multiple images so you can rope together all yo shizz.

Adding objs:
Now you have to make a new object that extends BaseObject that uses this animation, make a new .h file in include/ and make the #ifndef stuff and make it include BaseObject (#include "base_object.h") and extend BaseObject (add : public BaseObject, and now overrider the "load_animations" function (defined virtually in base_object.h) and make a respective .cpp file in source/ and make this "load_animations" function call setAnimation correctly (ex: "setAnimation(animHolder->get_anim(ANIM_XXX));").